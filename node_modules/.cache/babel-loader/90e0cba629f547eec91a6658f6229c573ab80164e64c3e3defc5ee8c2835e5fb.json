{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.charLength = charLength;\nexports.createEncoding = createEncoding;\nclass CharsetLengthError extends Error {\n  constructor(length) {\n    super(`Charset needs to contain exactly 2^n characters. ${length} is not a power of 2.`);\n  }\n}\nexports.CharsetLengthError = CharsetLengthError;\nfunction charLength(charset) {\n  if (!charset || !charset.length) {\n    throw new CharsetLengthError(0);\n  }\n  const charsetLength = charset.length.toString(2);\n  const powerOf2 = charsetLength.length > 1 && charsetLength.match(/1/g).length === 1;\n  if (!powerOf2) {\n    throw new CharsetLengthError(charset.length);\n  }\n  return charsetLength.length - 1;\n}\nfunction createEncoding(charset) {\n  const _charLength = charLength(charset);\n  const encodeBaseN = bytes => {\n    const numBits = bytes.length * 8;\n    const hashLength = Math.ceil(numBits / _charLength);\n    const output = new Array(hashLength);\n    let pos = 0;\n    let charNum = 0;\n    while (pos < numBits) {\n      let chunk = 0;\n      for (let i = 0; i < _charLength; i++) {\n        let _pos = pos + i;\n        const byte = bytes[_pos >> 3]; // _pos % 8\n        _pos = _pos & 0b111; // Math.floor(_pos / 8);\n        const bit = byte >> 7 - _pos & 1;\n        chunk <<= 1;\n        chunk |= bit;\n      }\n      output[charNum] = charset[chunk];\n      pos += _charLength;\n      charNum++;\n    }\n    return output;\n  };\n  Object.defineProperty(encodeBaseN, 'name', {\n    value: 'encodeBase' + charset.length,\n    configurable: true\n  });\n  return encodeBaseN;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","charLength","createEncoding","CharsetLengthError","Error","constructor","length","charset","charsetLength","toString","powerOf2","match","_charLength","encodeBaseN","bytes","numBits","hashLength","Math","ceil","output","Array","pos","charNum","chunk","i","_pos","byte","bit","configurable"],"sources":["/home/sl/Desktop/Vite-React-Typescript-Railway-Template/node_modules/random-hash/dist/baseN.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.charLength = charLength;\nexports.createEncoding = createEncoding;\nclass CharsetLengthError extends Error {\n    constructor(length) {\n        super(`Charset needs to contain exactly 2^n characters. ${ length } is not a power of 2.`);\n    }\n}\n\nexports.CharsetLengthError = CharsetLengthError;\nfunction charLength(charset) {\n    if (!charset || !charset.length) {\n        throw new CharsetLengthError(0);\n    }\n\n    const charsetLength = charset.length.toString(2);\n    const powerOf2 = charsetLength.length > 1 && charsetLength.match(/1/g).length === 1;\n\n    if (!powerOf2) {\n        throw new CharsetLengthError(charset.length);\n    }\n\n    return charsetLength.length - 1;\n}\n\nfunction createEncoding(charset) {\n    const _charLength = charLength(charset);\n\n    const encodeBaseN = bytes => {\n        const numBits = bytes.length * 8;\n        const hashLength = Math.ceil(numBits / _charLength);\n        const output = new Array(hashLength);\n\n        let pos = 0;\n        let charNum = 0;\n\n        while (pos < numBits) {\n            let chunk = 0;\n\n            for (let i = 0; i < _charLength; i++) {\n                let _pos = pos + i;\n\n                const byte = bytes[_pos >> 3]; // _pos % 8\n                _pos = _pos & 0b111; // Math.floor(_pos / 8);\n                const bit = byte >> 7 - _pos & 1;\n\n                chunk <<= 1;\n                chunk |= bit;\n            }\n\n            output[charNum] = charset[chunk];\n\n            pos += _charLength;\n            charNum++;\n        }\n\n        return output;\n    };\n\n    Object.defineProperty(encodeBaseN, 'name', {\n        value: 'encodeBase' + charset.length,\n        configurable: true\n    });\n\n    return encodeBaseN;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAGA,UAAU;AAC/BF,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,MAAMC,kBAAkB,SAASC,KAAK,CAAC;EACnCC,WAAW,CAACC,MAAM,EAAE;IAChB,KAAK,CAAE,oDAAoDA,MAAQ,uBAAsB,CAAC;EAC9F;AACJ;AAEAP,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASF,UAAU,CAACM,OAAO,EAAE;EACzB,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACD,MAAM,EAAE;IAC7B,MAAM,IAAIH,kBAAkB,CAAC,CAAC,CAAC;EACnC;EAEA,MAAMK,aAAa,GAAGD,OAAO,CAACD,MAAM,CAACG,QAAQ,CAAC,CAAC,CAAC;EAChD,MAAMC,QAAQ,GAAGF,aAAa,CAACF,MAAM,GAAG,CAAC,IAAIE,aAAa,CAACG,KAAK,CAAC,IAAI,CAAC,CAACL,MAAM,KAAK,CAAC;EAEnF,IAAI,CAACI,QAAQ,EAAE;IACX,MAAM,IAAIP,kBAAkB,CAACI,OAAO,CAACD,MAAM,CAAC;EAChD;EAEA,OAAOE,aAAa,CAACF,MAAM,GAAG,CAAC;AACnC;AAEA,SAASJ,cAAc,CAACK,OAAO,EAAE;EAC7B,MAAMK,WAAW,GAAGX,UAAU,CAACM,OAAO,CAAC;EAEvC,MAAMM,WAAW,GAAGC,KAAK,IAAI;IACzB,MAAMC,OAAO,GAAGD,KAAK,CAACR,MAAM,GAAG,CAAC;IAChC,MAAMU,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACH,OAAO,GAAGH,WAAW,CAAC;IACnD,MAAMO,MAAM,GAAG,IAAIC,KAAK,CAACJ,UAAU,CAAC;IAEpC,IAAIK,GAAG,GAAG,CAAC;IACX,IAAIC,OAAO,GAAG,CAAC;IAEf,OAAOD,GAAG,GAAGN,OAAO,EAAE;MAClB,IAAIQ,KAAK,GAAG,CAAC;MAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,WAAW,EAAEY,CAAC,EAAE,EAAE;QAClC,IAAIC,IAAI,GAAGJ,GAAG,GAAGG,CAAC;QAElB,MAAME,IAAI,GAAGZ,KAAK,CAACW,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/BA,IAAI,GAAGA,IAAI,GAAG,KAAK,CAAC,CAAC;QACrB,MAAME,GAAG,GAAGD,IAAI,IAAI,CAAC,GAAGD,IAAI,GAAG,CAAC;QAEhCF,KAAK,KAAK,CAAC;QACXA,KAAK,IAAII,GAAG;MAChB;MAEAR,MAAM,CAACG,OAAO,CAAC,GAAGf,OAAO,CAACgB,KAAK,CAAC;MAEhCF,GAAG,IAAIT,WAAW;MAClBU,OAAO,EAAE;IACb;IAEA,OAAOH,MAAM;EACjB,CAAC;EAEDtB,MAAM,CAACC,cAAc,CAACe,WAAW,EAAE,MAAM,EAAE;IACvCb,KAAK,EAAE,YAAY,GAAGO,OAAO,CAACD,MAAM;IACpCsB,YAAY,EAAE;EAClB,CAAC,CAAC;EAEF,OAAOf,WAAW;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}