{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.indeterminate = false;\n    this.progress = 0;\n    this.density = 0;\n    this.closed = false;\n  }\n  open() {\n    this.closed = false;\n  }\n  close() {\n    this.closed = true;\n  }\n  /**\n   * @soyTemplate\n   */\n  render() {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate\n    };\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`\n    };\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n  /**\n   * @soyTemplate\n   */\n  renderDeterminateContainer() {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 : 12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) : 3 + (this.density + 3) * (1 / 6);\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n  /**\n   * @soyTemplate\n   */\n  renderIndeterminateContainer() {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n  /**\n   * @soyTemplate\n   */\n  renderIndeterminateSpinnerLayer() {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 : 12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) : 3 + (this.density + 3) * (1 / 6);\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n  update(changedProperties) {\n    super.update(changedProperties);\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], CircularProgressBase.prototype, \"indeterminate\", void 0);\n__decorate([property({\n  type: Number,\n  reflect: true\n})], CircularProgressBase.prototype, \"progress\", void 0);\n__decorate([property({\n  type: Number,\n  reflect: true\n})], CircularProgressBase.prototype, \"density\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], CircularProgressBase.prototype, \"closed\", void 0);\n__decorate([ariaProperty, property({\n  type: String,\n  attribute: 'aria-label'\n})], CircularProgressBase.prototype, \"ariaLabel\", void 0);","map":{"version":3,"mappings":"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","names":["ariaProperty","html","LitElement","property","classMap","ifDefined","styleMap","CircularProgressBase","constructor","open","closed","close","render","classes","indeterminate","containerSideLength","density","styles","ariaLabel","undefined","progress","renderDeterminateContainer","renderIndeterminateContainer","sideLength","center","circleRadius","circumference","determinateStrokeDashOffset","strokeWidth","renderIndeterminateSpinnerLayer","halfCircumference","update","changedProperties","has","__decorate","type","Boolean","reflect","Number","String","attribute"],"sources":["/home/sl/Desktop/Vite-React-Typescript-Railway-Template/node_modules/@material/mwc-circular-progress/mwc-circular-progress-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  override ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: PropertyValues<this>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}