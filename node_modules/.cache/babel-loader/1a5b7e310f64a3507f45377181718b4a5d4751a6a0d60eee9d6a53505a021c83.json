{"ast":null,"code":"const {\n  execSync,\n  spawn\n} = require('child_process');\nconst {\n  platform\n} = process;\nconst {\n  join\n} = require('path');\nconst isProgramInstalled = require('is-program-installed');\nconst windowsScript = join(__dirname, 'msgbox.vbs');\nconst execCmd = cmds => spawn(cmds[0], cmds.splice(1));\nconst unixPrograms = ['kdialog', 'zenity', 'yad', 'notify-send', 'xmessage', 'dialog', 'whiptail'];\nconst bestUnixProgram = unixPrograms.filter(isProgramInstalled)[0] || 'console';\nconst cscript = s => ['cscript', windowsScript, s];\nconst msg = str => ['msg', '\"%username%\"', str];\nconst zenity = s => ['zenity', '--info', '--text', s];\nconst yad = s => ['yad', '--text', s, '--button', 'OK'];\nconst notifySend = s => ['notify-send', s];\nconst xmessage = s => ['xmessage', s];\nconst dialog = s => ['dialog', '--msgbox', s, '10', '30'];\nconst whiptail = s => ['whiptail', '--msbox', s, '10', '30'];\nconst kdialog = s => ['kdialog', '--msgbox', s];\nconst osascript = s => ['osascript', '-e', `tell app \"System Events\" to display dialog \"${s}\" buttons \"OK\"`];\nconst hasCscript = platform.startsWith('win') && (() => {\n  try {\n    execSync('cscript');\n    return true;\n  } catch {\n    return false;\n  }\n})();\nconst nameMap = {\n  console: console.log,\n  cscript,\n  dialog,\n  kdialog,\n  msg,\n  'notify-send': notifySend,\n  osascript,\n  whiptail,\n  xmessage,\n  yad,\n  zenity\n};\nconst getAlert = function () {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let thingToUse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const execInput = cmd => execCmd(cmd(input));\n  const pickFromNameMap = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bestUnixProgram;\n    if (option !== 'console') {\n      if (nameMap[option]) {\n        return execInput(nameMap[option]);\n      }\n    }\n    return console.log(input);\n  };\n  if (thingToUse) {\n    return pickFromNameMap(thingToUse);\n  }\n  switch (platform) {\n    case 'linux':\n    case 'freebsd':\n    case 'sunos':\n      return pickFromNameMap(bestUnixProgram);\n    case 'darwin':\n      return execInput(osascript);\n    case 'win32':\n      return hasCscript ? execInput(cscript) : execInput(msg);\n    default:\n      return console.log(input);\n  }\n};\nmodule.exports = process.env.DISABLE_ALERT !== '1' ? getAlert : () => {};","map":{"version":3,"names":["execSync","spawn","require","platform","process","join","isProgramInstalled","windowsScript","__dirname","execCmd","cmds","splice","unixPrograms","bestUnixProgram","filter","cscript","s","msg","str","zenity","yad","notifySend","xmessage","dialog","whiptail","kdialog","osascript","hasCscript","startsWith","nameMap","console","log","getAlert","input","thingToUse","execInput","cmd","pickFromNameMap","option","module","exports","env","DISABLE_ALERT"],"sources":["/home/sl/Desktop/SimpleFolio/Vite-React-Typescript-Railway-Template/node_modules/alert/node.js"],"sourcesContent":["const { execSync, spawn } = require('child_process')\nconst { platform } = process\nconst { join } = require('path')\nconst isProgramInstalled = require('is-program-installed')\nconst windowsScript = join(__dirname, 'msgbox.vbs')\n\nconst execCmd = (cmds) => spawn(cmds[0], cmds.splice(1))\n\nconst unixPrograms = [\n  'kdialog',\n  'zenity',\n  'yad',\n  'notify-send',\n  'xmessage',\n  'dialog',\n  'whiptail'\n]\n\nconst bestUnixProgram = unixPrograms.filter(isProgramInstalled)[0] || 'console'\n\nconst cscript = (s) => ['cscript', windowsScript, s]\nconst msg = (str) => ['msg', '\"%username%\"', str]\nconst zenity = (s) => ['zenity', '--info', '--text', s]\nconst yad = (s) => ['yad', '--text', s, '--button', 'OK']\nconst notifySend = (s) => ['notify-send', s]\nconst xmessage = (s) => ['xmessage', s]\nconst dialog = (s) => ['dialog', '--msgbox', s, '10', '30']\nconst whiptail = (s) => ['whiptail', '--msbox', s, '10', '30']\nconst kdialog = (s) => ['kdialog', '--msgbox', s]\nconst osascript = (s) => [\n  'osascript',\n  '-e',\n  `tell app \"System Events\" to display dialog \"${s}\" buttons \"OK\"`\n]\n\nconst hasCscript =\n  platform.startsWith('win') &&\n  (() => {\n    try {\n      execSync('cscript')\n      return true\n    } catch {\n      return false\n    }\n  })()\n\nconst nameMap = {\n  console: console.log,\n  cscript,\n  dialog,\n  kdialog,\n  msg,\n  'notify-send': notifySend,\n  osascript,\n  whiptail,\n  xmessage,\n  yad,\n  zenity\n}\n\nconst getAlert = (input = '', thingToUse = '') => {\n  const execInput = (cmd) => execCmd(cmd(input))\n\n  const pickFromNameMap = (option = bestUnixProgram) => {\n    if (option !== 'console') {\n      if (nameMap[option]) {\n        return execInput(nameMap[option])\n      }\n    }\n    return console.log(input)\n  }\n\n  if (thingToUse) {\n    return pickFromNameMap(thingToUse)\n  }\n\n  switch (platform) {\n    case 'linux':\n    case 'freebsd':\n    case 'sunos':\n      return pickFromNameMap(bestUnixProgram)\n    case 'darwin':\n      return execInput(osascript)\n    case 'win32':\n      return hasCscript ? execInput(cscript) : execInput(msg)\n    default:\n      return console.log(input)\n  }\n}\n\nmodule.exports = process.env.DISABLE_ALERT !== '1' ? getAlert : () => {}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}