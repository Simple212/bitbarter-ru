{"ast":null,"code":"const {\n  readdirSync\n} = require('fs');\nconst {\n  execSync\n} = require('child_process');\nconst opts = {\n  stdio: 'ignore'\n};\nconst exec = cmd => execSync(cmd, opts);\nconst isUnixInstalled = program => {\n  try {\n    exec(`hash ${program} 2>/dev/null`);\n    return true;\n  } catch {\n    return false;\n  }\n};\nconst isDirectory = path => {\n  try {\n    readdirSync(path);\n    return true;\n  } catch {\n    return false;\n  }\n};\nconst isDotDesktopInstalled = program => {\n  const dirs = [process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications', process.env.HOME && process.env.HOME + '/.local/share/applications', '/usr/share/applications', '/usr/local/share/applications'].filter(Boolean).filter(isDirectory);\n  const trimExtension = x => x.replace(/\\.desktop$/, '');\n  const desktopFiles = dirs.flatMap(x => readdirSync(x)).filter(x => x.endsWith('.desktop')).map(trimExtension);\n  const programTrimmed = trimExtension(program);\n  return desktopFiles.includes(programTrimmed);\n};\nconst isMacInstalled = program => {\n  try {\n    exec(`osascript -e 'id of application \"${program}\"' 2>&1>/dev/null`);\n    return true;\n  } catch {\n    return false;\n  }\n};\nconst isWindowsInstalled = program => {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  const attempts = [`where ${program}`, `where ${program}.exe`, `where.exe ${program}`, `where.exe ${program}.exe`];\n  let success = false;\n  for (const a of attempts) {\n    try {\n      exec(a);\n      success = true;\n    } catch {}\n  }\n  return success;\n};\nconst sanitize = program => {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n  /* eslint-disable no-useless-escape,no-control-regex */\n  const illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\n  const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\n  const reservedRe = /^\\.+$/;\n  const probablyTwoThingsRe = /\\&\\&/g;\n  /* eslint-enable no-useless-escape,no-control-regex */\n  return program.replace(illegalRe, '').replace(controlRe, '').replace(reservedRe, '').replace(probablyTwoThingsRe, '');\n};\nmodule.exports = program => [isUnixInstalled, isMacInstalled, isWindowsInstalled, isDotDesktopInstalled].some(f => f(sanitize(program)));","map":{"version":3,"names":["readdirSync","require","execSync","opts","stdio","exec","cmd","isUnixInstalled","program","isDirectory","path","isDotDesktopInstalled","dirs","process","env","XDG_DATA_HOME","HOME","filter","Boolean","trimExtension","x","replace","desktopFiles","flatMap","endsWith","map","programTrimmed","includes","isMacInstalled","isWindowsInstalled","attempts","success","a","sanitize","illegalRe","controlRe","reservedRe","probablyTwoThingsRe","module","exports","some","f"],"sources":["/home/sl/Desktop/SimpleFolio/Vite-React-Typescript-Railway-Template/node_modules/is-program-installed/index.js"],"sourcesContent":["const { readdirSync } = require('fs')\nconst { execSync } = require('child_process')\n\nconst opts = {\n  stdio: 'ignore'\n}\nconst exec = (cmd) => execSync(cmd, opts)\n\nconst isUnixInstalled = (program) => {\n  try {\n    exec(`hash ${program} 2>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isDirectory = (path) => {\n  try {\n    readdirSync(path)\n    return true\n  } catch {\n    return false\n  }\n}\nconst isDotDesktopInstalled = (program) => {\n  const dirs = [\n    process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications',\n    process.env.HOME && process.env.HOME + '/.local/share/applications',\n    '/usr/share/applications',\n    '/usr/local/share/applications'\n  ]\n    .filter(Boolean)\n    .filter(isDirectory)\n\n  const trimExtension = (x) => x.replace(/\\.desktop$/, '')\n  const desktopFiles = dirs\n    .flatMap((x) => readdirSync(x))\n    .filter((x) => x.endsWith('.desktop'))\n    .map(trimExtension)\n\n  const programTrimmed = trimExtension(program)\n  return desktopFiles.includes(programTrimmed)\n}\n\nconst isMacInstalled = (program) => {\n  try {\n    exec(`osascript -e 'id of application \"${program}\"' 2>&1>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isWindowsInstalled = (program) => {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  const attempts = [\n    `where ${program}`,\n    `where ${program}.exe`,\n    `where.exe ${program}`,\n    `where.exe ${program}.exe`\n  ]\n\n  let success = false\n  for (const a of attempts) {\n    try {\n      exec(a)\n      success = true\n    } catch {}\n  }\n\n  return success\n}\n\nconst sanitize = (program) => {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n  /* eslint-disable no-useless-escape,no-control-regex */\n  const illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g\n  const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g\n  const reservedRe = /^\\.+$/\n  const probablyTwoThingsRe = /\\&\\&/g\n  /* eslint-enable no-useless-escape,no-control-regex */\n  return program\n    .replace(illegalRe, '')\n    .replace(controlRe, '')\n    .replace(reservedRe, '')\n    .replace(probablyTwoThingsRe, '')\n}\n\nmodule.exports = (program) => [\n  isUnixInstalled,\n  isMacInstalled,\n  isWindowsInstalled,\n  isDotDesktopInstalled\n].some((f) => f(sanitize(program)))\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}